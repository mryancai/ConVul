#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <unistd.h>
#include <time.h>

// #define TEST_TIME

struct CRITICAL_SECTION{
    pthread_mutex_t mutex;

    CRITICAL_SECTION()
    {
        pthread_mutex_init(&mutex, NULL);
    }
};

void Inc(long *num)
{
    ++(*num);
}

long Dec(long *num)
{
    return --(*num);
}

void Enter(pthread_mutex_t* l)
{
    pthread_mutex_lock(l);
}

void Exit(pthread_mutex_t* l)
{
    pthread_mutex_unlock(l);
}

void* once(void* arg)
{
    //static pthread_mutex_t* lock = (pthread_mutex_t*)malloc(sizeof(pthread_mutex_t));
    static CRITICAL_SECTION* lock = new CRITICAL_SECTION();
    static long waiters = 0;
    static int done = 0;

    if(done)
        return NULL;

    Inc(&waiters);
    Enter(&(lock->mutex));
    printf("T-%lx, Enter\n", pthread_self());

    if(!done)
    {
        done = 1;
    }

    printf("T-%lx, Exit\n", pthread_self());

    Exit(&(lock->mutex));

    if(!Dec(&waiters))
    {
        printf("T-%lx, After  Decrement waiters = %ld\n",pthread_self(), waiters);
        printf("T-%lx, free lock %p\n", pthread_self(), lock);
        free(lock);
        lock = NULL;
    }

}

#define thread_size 2

int main()
{
#ifdef TEST_TIME
    static double run_time_begin;
    static double run_time_end;
    static double run_time_total;
    run_time_begin = clock();
#endif
    pthread_t t[thread_size];

    for(int i = 0; i < thread_size;)
    {
        pthread_create(&t[i], NULL, once, NULL);
        pthread_create(&t[i+1], NULL, once, NULL);
        i += 2;
    }

    struct timeval start, end;
    gettimeofday( &start, NULL );

    for(int i = 0; i < thread_size;)
    {
        pthread_join(t[i], NULL);
        pthread_join(t[i+1], NULL);
        i += 2;
    }

    gettimeofday( &end, NULL );
    int timeuse = 1000000 * ( end.tv_sec - start.tv_sec ) + end.tv_usec -start.tv_usec;
    printf("time: %d us\n", timeuse);

    printf("\nprogram-successful-exit\n");
#ifdef TEST_TIME
    run_time_end = clock();
    run_time_total = run_time_end - run_time_begin;
    printf("test-the-total-time: %.3lf\n", (double)(run_time_total/CLOCKS_PER_SEC)*1000);
#endif
    return 0;
}
