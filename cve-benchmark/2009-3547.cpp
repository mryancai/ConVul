#include <pthread.h>
#include <stdio.h>
#include <unistd.h>
#include <iostream>
#include <stdlib.h>
#include <time.h>

// #define TEST_TIME

using namespace std;

struct pipe_inode_info
{
    unsigned int writers;
    unsigned int readers;

    pipe_inode_info()
    {
        writers = 0;
        readers = 0;
    }
};

struct INODE
{
    pthread_mutex_t i_mutex;
    struct pipe_inode_info *i_pipe;

    INODE()
    {
        pthread_mutex_init(&i_mutex, NULL);
        i_pipe = new pipe_inode_info();
    }
};


struct INODE* inode = new INODE();

static void* pipe_write_open(void* arg)
{
    pthread_mutex_lock(&inode->i_mutex);

    inode->i_pipe->readers++;
    cout << "threadA: " << std::hex << inode->i_pipe << endl;

    pthread_mutex_unlock(&inode->i_mutex);
}

static void* involve(void* arg)
{
    pthread_mutex_lock(&inode->i_mutex);
    inode->i_pipe = NULL;
    pthread_mutex_unlock(&inode->i_mutex);
    cout << "threadB: " << std::hex << inode->i_pipe << endl;
}

int main()
{
#ifdef TEST_TIME
    static double run_time_begin;
    static double run_time_end;
    static double run_time_total;
    run_time_begin = clock();
#endif

    pthread_t t1, t2;

    pthread_create(&t1, NULL, pipe_write_open, NULL);
    pthread_create(&t2, NULL, involve, NULL);

    pthread_join(t1, NULL);
    pthread_join(t2, NULL);

    printf("\nprogram-successful-exit\n");

#ifdef TEST_TIME
    run_time_end = clock();
    run_time_total = run_time_end - run_time_begin;
    printf("test-the-total-time: %.3lf\n", (double)(run_time_total/CLOCKS_PER_SEC)*1000);
#endif
    
    return 0;
}
