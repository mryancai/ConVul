#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#include <time.h>

// #define TEST_TIME

typedef struct {
	int counter;
} atomic_t;

#define spinlock_t pthread_mutex_t

struct io_context {
	atomic_t nr_tasks;
	unsigned short ioprio;
};

struct task_struct {
	struct io_context *io_context;
	spinlock_t alloc_lock;
};

#define IOPRIO_CLASS_SHIFT	(13)
#define IOPRIO_PRIO_VALUE(class, data)	(((class) << IOPRIO_CLASS_SHIFT) | data)
enum {
	IOPRIO_CLASS_NONE,
	IOPRIO_CLASS_RT,
	IOPRIO_CLASS_BE,
	IOPRIO_CLASS_IDLE,
};
#define IOPRIO_NORM	(4)

static inline void task_lock(struct task_struct *p)
{
	pthread_mutex_lock(&p->alloc_lock);
}

static inline void task_unlock(struct task_struct *p)
{
	pthread_mutex_unlock(&p->alloc_lock);
}

static inline void atomic_dec(atomic_t * v){
	(v->counter)--;
}

int security_task_getioprio(struct task_struct *p)
{
	return 0;
}

void put_io_context_active(struct io_context *ioc)
{
}

static int get_task_ioprio(struct task_struct *p)
{
	int ret;

	ret = security_task_getioprio(p);
	if (ret)
		goto out;
	ret = IOPRIO_PRIO_VALUE(IOPRIO_CLASS_NONE, IOPRIO_NORM);
	if (p->io_context)
	{
		ret = p->io_context->ioprio;
		puts("after use");
	}
out:
	return ret;
}

void exit_io_context(struct task_struct *task)
{
	struct io_context *ioc;

	task_lock(task);
	ioc = task->io_context;
	task->io_context = NULL;
	puts("NULL");
	task_unlock(task);

	atomic_dec(&ioc->nr_tasks);
	put_io_context_active(ioc);
}

void* thread_one(void* args){
	struct task_struct *p = (task_struct *)args;
	get_task_ioprio(p);
	puts("exit thread 1");
}

void* thread_two(void* args){
	struct task_struct *p = (task_struct *)args;
	exit_io_context(p);
	puts("exit thread 2");
}

int main(){
#ifdef TEST_TIME
	static double run_time_begin;
	static double run_time_end;
	static double run_time_total;
	run_time_begin = clock();
#endif
	struct task_struct task_test;
	struct io_context ioc_test;

    ioc_test.ioprio = 1;
	pthread_mutex_init(&(task_test.alloc_lock), NULL);
	task_test.io_context = &ioc_test;

	pthread_t t1, t2;
	pthread_create(&t1, NULL, thread_one, &task_test);
	pthread_create(&t2, NULL, thread_two, &task_test);

	pthread_join(t1, NULL);
	pthread_join(t2, NULL);
    printf("\nprogram-successful-exit\n");
#ifdef TEST_TIME
    run_time_end = clock();
    run_time_total = run_time_end - run_time_begin;
    printf("test-the-total-time: %.3lf\n", (double)(run_time_total/CLOCKS_PER_SEC)*1000);
#endif
	return 0;
}
